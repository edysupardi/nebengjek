version: '3.8'

services:
  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./deployment/docker/user-service.dockerfile
    ports:
      - "${USER_PORT:-3001}:${USER_PORT:-3001}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_ACCESS_EXPIRES_IN=${JWT_ACCESS_EXPIRES_IN:-15m}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - USER_PORT=${USER_PORT:-3001}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/user-service:/app/apps/user-service
      - ./libs:/app/libs
      - ./prisma:/app/prisma
    networks:
      - nebengjek-network
    restart: unless-stopped

  # Booking Service
  booking-service:
    build:
      context: .
      dockerfile: ./deployment/docker/booking-service.dockerfile
    ports:
      - "${BOOKING_PORT:-3002}:${BOOKING_PORT:-3002}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - BOOKING_PORT=${BOOKING_PORT:-3002}
      - TRACKING_SERVICE_HOST=${TRACKING_SERVICE_HOST:-tracking-service}
      - TRACKING_PORT=${TRACKING_PORT:-3003}
      - NOTIFICATION_SERVICE_HOST=${NOTIFICATION_SERVICE_HOST:-notification-service}
      - NOTIFICATION_PORT=${NOTIFICATION_PORT:-3004}
      - MATCHING_SERVICE_HOST=${MATCHING_SERVICE_HOST:-matching-service}
      - MATCHING_PORT=${MATCHING_PORT:-3006}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/booking-service:/app/apps/booking-service
      - ./libs:/app/libs
      - ./prisma:/app/prisma
    networks:
      - nebengjek-network
    restart: unless-stopped

  # Tracking Service
  tracking-service:
    build:
      context: .
      dockerfile: ./deployment/docker/tracking-service.dockerfile
    ports:
      - "${TRACKING_PORT:-3003}:${TRACKING_PORT:-3003}"
      - "${TRACKING_WS_PORT:-3060}:${TRACKING_WS_PORT:-3060}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - TRACKING_PORT=${TRACKING_PORT:-3003}
      - TRACKING_WS_PORT=${TRACKING_WS_PORT:-3060}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/tracking-service:/app/apps/tracking-service
      - ./libs:/app/libs
      - ./prisma:/app/prisma
    networks:
      - nebengjek-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./deployment/docker/notification-service.dockerfile
    ports:
      - "${NOTIFICATION_PORT:-3004}:${NOTIFICATION_PORT:-3004}"
      - "${NOTIFICATION_WS_PORT:-3050}:${NOTIFICATION_WS_PORT:-3050}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - NOTIFICATION_PORT=${NOTIFICATION_PORT:-3004}
      - NOTIFICATION_WS_PORT=${NOTIFICATION_WS_PORT:-3050}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/notification-service:/app/apps/notification-service
      - ./libs:/app/libs
      - ./prisma:/app/prisma
    networks:
      - nebengjek-network
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: ./deployment/docker/payment-service.dockerfile
    ports:
      - "${PAYMENT_PORT:-3005}:${PAYMENT_PORT:-3005}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - PAYMENT_PORT=${PAYMENT_PORT:-3005}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/payment-service:/app/apps/payment-service
      - ./libs:/app/libs
      - ./prisma:/app/prisma
    networks:
      - nebengjek-network
    restart: unless-stopped

  # Matching Service
  matching-service:
    build:
      context: .
      dockerfile: ./deployment/docker/matching-service.dockerfile
    ports:
      - "${MATCHING_PORT:-3006}:${MATCHING_PORT:-3006}"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - MATCHING_PORT=${MATCHING_PORT:-3006}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/matching-service:/app/apps/matching-service
      - ./libs:/app/libs
      - ./prisma:/app/prisma
    networks:
      - nebengjek-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./prisma/schema.prisma:/docker-entrypoint-initdb.d/schema.prisma:ro
    networks:
      - nebengjek-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    networks:
      - nebengjek-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Administration (Optional - for development)
  adminer:
    image: adminer:latest
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - nebengjek-network
    restart: unless-stopped
    profiles:
      - dev

  # Redis Commander (Optional - for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      - redis
    networks:
      - nebengjek-network
    restart: unless-stopped
    profiles:
      - dev

networks:
  nebengjek-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET:-172.20.0.0/16}

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local