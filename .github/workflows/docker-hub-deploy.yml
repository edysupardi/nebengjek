name: 'Build and Deploy to VPS via Docker Hub'

on:
  push:
    branches: [main, development]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - prod

env:
  DOCKER_HUB_ORGANIZATION: nebengjek
  ENVIRONMENT: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

jobs:
  build-and-push:
    name: 'Build and Push to Docker Hub'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push all microservices
        run: |
          echo "üê≥ Building and pushing all microservices to Docker Hub..."

          services=("user-service" "booking-service" "matching-service" "notification-service" "payment-service" "tracking-service")

          for service in "${services[@]}"; do
            echo "üèóÔ∏è Building $service..."
            
            # Check if Dockerfile exists
            if [ -f "./deployment/docker/$service.dockerfile" ]; then
              echo "‚úÖ Found Dockerfile for $service"
              
              # Build with multiple tags
              docker build \
                -f ./deployment/docker/$service.dockerfile \
                -t $DOCKER_HUB_ORGANIZATION/$service:latest \
                -t $DOCKER_HUB_ORGANIZATION/$service:${{ github.sha }} \
                -t $DOCKER_HUB_ORGANIZATION/$service:${{ env.ENVIRONMENT }} \
                .
              
              echo "üì§ Pushing $service to Docker Hub..."
              docker push $DOCKER_HUB_ORGANIZATION/$service:latest
              docker push $DOCKER_HUB_ORGANIZATION/$service:${{ github.sha }}
              docker push $DOCKER_HUB_ORGANIZATION/$service:${{ env.ENVIRONMENT }}
              
              echo "‚úÖ $service pushed successfully!"
            else
              echo "‚ùå Dockerfile not found for $service at ./deployment/docker/$service.dockerfile"
              exit 1
            fi
          done

      - name: Generate deployment summary
        run: |
          echo "üìä DOCKER HUB DEPLOYMENT SUMMARY"
          echo "================================="
          echo ""
          echo "üèóÔ∏è Built and pushed:"
          echo "   üì¶ nebengjek/user-service:latest"
          echo "   üì¶ nebengjek/booking-service:latest"
          echo "   üì¶ nebengjek/matching-service:latest"
          echo "   üì¶ nebengjek/notification-service:latest"
          echo "   üì¶ nebengjek/payment-service:latest"
          echo "   üì¶ nebengjek/tracking-service:latest"
          echo ""
          echo "üè∑Ô∏è Tags created for each service:"
          echo "   ‚Ä¢ latest (for production)"
          echo "   ‚Ä¢ ${{ github.sha }} (commit specific)"
          echo "   ‚Ä¢ ${{ env.ENVIRONMENT }} (environment specific)"
          echo ""
          echo "üéØ Next step: Deploy to VPS!"

  deploy-to-vps:
    name: 'Deploy to VPS'
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy microservices to VPS
        run: |
          echo "üöÄ Deploying microservices to VPS..."

          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e

          echo "üìÅ Creating deployment directory..."
          sudo mkdir -p /opt/nebengjek-services
          cd /opt/nebengjek-services

          echo "üõë Stopping existing services..."
          # Stop existing containers if they exist
          for service in user-service booking-service matching-service notification-service payment-service tracking-service; do
            sudo docker stop nebengjek-$service 2>/dev/null || true
            sudo docker rm nebengjek-$service 2>/dev/null || true
          done

          echo "üì• Pulling latest images from Docker Hub..."
          services=("user-service" "booking-service" "matching-service" "notification-service" "payment-service" "tracking-service")

          for service in "${services[@]}"; do
            echo "Pulling nebengjek/$service:latest..."
            sudo docker pull nebengjek/$service:latest
          done

          echo "üîÑ Starting microservices..."

          # User Service (Port 3001)
          sudo docker run -d \
            --name nebengjek-user-service \
            --restart unless-stopped \
            --network bridge \
            -p 3001:3001 \
            -e NODE_ENV=production \
            -e USER_PORT=3001 \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e REDIS_URL="${{ secrets.REDIS_URL }}" \
            -e JWT_ACCESS_SECRET="${{ secrets.JWT_ACCESS_SECRET }}" \
            -e JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}" \
            nebengjek/user-service:latest

          # Booking Service (Port 3002)
          sudo docker run -d \
            --name nebengjek-booking-service \
            --restart unless-stopped \
            --network bridge \
            -p 3002:3002 \
            -e NODE_ENV=production \
            -e BOOKING_PORT=3002 \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e REDIS_URL="${{ secrets.REDIS_URL }}" \
            nebengjek/booking-service:latest

          # Matching Service (Port 3003)
          sudo docker run -d \
            --name nebengjek-matching-service \
            --restart unless-stopped \
            --network bridge \
            -p 3003:3003 \
            -e NODE_ENV=production \
            -e MATCHING_PORT=3003 \
            -e REDIS_URL="${{ secrets.REDIS_URL }}" \
            nebengjek/matching-service:latest

          # Notification Service (Port 3004)
          sudo docker run -d \
            --name nebengjek-notification-service \
            --restart unless-stopped \
            --network bridge \
            -p 3004:3004 \
            -e NODE_ENV=production \
            -e NOTIFICATION_PORT=3004 \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e REDIS_URL="${{ secrets.REDIS_URL }}" \
            nebengjek/notification-service:latest

          # Payment Service (Port 3005)
          sudo docker run -d \
            --name nebengjek-payment-service \
            --restart unless-stopped \
            --network bridge \
            -p 3005:3005 \
            -e NODE_ENV=production \
            -e PAYMENT_PORT=3005 \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e REDIS_URL="${{ secrets.REDIS_URL }}" \
            nebengjek/payment-service:latest

          # Tracking Service (Port 3006)
          sudo docker run -d \
            --name nebengjek-tracking-service \
            --restart unless-stopped \
            --network bridge \
            -p 3006:3006 \
            -e NODE_ENV=production \
            -e TRACKING_PORT=3006 \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e REDIS_URL="${{ secrets.REDIS_URL }}" \
            nebengjek/tracking-service:latest

          echo "‚úÖ All microservices deployed!"

          echo "üîç Checking service status..."
          sudo docker ps --filter "name=nebengjek-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

          echo "üîÑ Reloading Nginx configuration..."
          sudo nginx -t && sudo systemctl reload nginx

          echo "üéâ Deployment completed successfully!"
          EOF

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."

          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          echo "üìä Service Status Check:"
          echo "======================="

          services=("user-service" "booking-service" "matching-service" "notification-service" "payment-service" "tracking-service")
          ports=(3001 3002 3003 3004 3005 3006)

          for i in "${!services[@]}"; do
            service="${services[i]}"
            port="${ports[i]}"
            
            echo "Checking $service on port $port..."
            
            # Check if container is running
            if sudo docker ps | grep -q "nebengjek-$service"; then
              echo "‚úÖ Container nebengjek-$service is running"
              
              # Try to check health endpoint
              if curl -s -f "http://localhost:$port/health" > /dev/null 2>&1; then
                echo "‚úÖ Health check passed for $service"
              else
                echo "‚ö†Ô∏è Health check failed for $service (may still be starting)"
              fi
            else
              echo "‚ùå Container nebengjek-$service is not running"
            fi
            echo ""
          done

          echo "üìã All Running Containers:"
          sudo docker ps --filter "name=nebengjek-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

          echo ""
          echo "üåê Nginx Status:"
          sudo systemctl status nginx --no-pager -l
          EOF

      - name: Generate deployment report
        run: |
          echo ""
          echo "üéâ NEBENGJEK VPS DEPLOYMENT COMPLETED!"
          echo "====================================="
          echo ""
          echo "üèóÔ∏è Infrastructure Status:"
          echo "   ‚úÖ PostgreSQL Database (Ready)"
          echo "   ‚úÖ Redis Cache (Ready)"
          echo "   ‚úÖ Nginx Web Server (Ready)"
          echo "   ‚úÖ UFW Firewall (Ready)"
          echo ""
          echo "üöÄ Microservices Deployed:"
          echo "   üì± User Service      ‚Üí http://your-domain/api/users/"
          echo "   üìÖ Booking Service   ‚Üí http://your-domain/api/bookings/"
          echo "   üîç Matching Service  ‚Üí http://your-domain/api/matching/"
          echo "   üîî Notification Service ‚Üí http://your-domain/api/notifications/"
          echo "   üí≥ Payment Service   ‚Üí http://your-domain/api/payments/"
          echo "   üìç Tracking Service  ‚Üí http://your-domain/api/tracking/"
          echo ""
          echo "üîó Management Interfaces:"
          echo "   üìä pgAdmin: http://your-vps-ip:5050"
          echo "   üóÑÔ∏è Redis Commander: http://your-vps-ip:8081"
          echo ""
          echo "üéØ Next Steps:"
          echo "   1. ‚úÖ Test API endpoints through Nginx"
          echo "   2. üîí Setup SSL certificates (Let's Encrypt)"
          echo "   3. üì± Test mobile app integration"
          echo "   4. üìä Setup monitoring (optional)"
