name: Deploy NebengJek

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_PREFIX: nebengjek

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test

  build-and-push:
    name: Build and Push Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [api-gateway, user-service, booking-service, matching-service, payment-service, notification-service, tracking-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} -f deployment/docker/${{ matrix.service }}.dockerfile .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy to AWS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Upload CloudFormation templates to S3
      run: |
        aws s3 sync deployment/cloudformation/ s3://nebengjek-cfn-templates/
        
    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file deployment/cloudformation/master.yaml \
          --stack-name nebengjek-dev \
          --parameter-overrides \
            Environment=dev \
            VpcId=${{ secrets.VPC_ID }} \
            PrivateSubnet1=${{ secrets.PRIVATE_SUBNET_1 }} \
            PrivateSubnet2=${{ secrets.PRIVATE_SUBNET_2 }} \
            PublicSubnet1=${{ secrets.PUBLIC_SUBNET_1 }} \
            PublicSubnet2=${{ secrets.PUBLIC_SUBNET_2 }} \
            ECRRepository=${{ env.ECR_REPOSITORY_PREFIX }} \
            ECSClusterName=nebengjek-cluster \
            DatabaseMasterUsername=${{ secrets.DB_MASTER_USERNAME }} \
            DatabaseMasterPassword=${{ secrets.DB_MASTER_PASSWORD }} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset