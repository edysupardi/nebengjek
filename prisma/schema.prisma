// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums sesuai CHECK constraints
enum Role {
  PASSENGER
  DRIVER
}

enum BookingStatus {
  REQUESTED
  MATCHED
  CANCELLED
}

enum TripStatus {
  ONGOING
  COMPLETED
}

enum NotificationType {
  BOOKING
  LOCATION_UPDATE
}

enum NotificationStatus {
  SENT
  FAILED
}

// Model Users
model User {
  id String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(100)
  email String @unique @db.VarChar(100)
  phoneNumber String @unique @map("phone_number") @db.VarChar(20)
  passwordHash String @map("password_hash")
  role Role
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  driverProfile DriverProfile? @relation("UserDriverProfile")
  bookings Booking[] @relation("UserBookings")
  driverTrips Trip[] @relation("DriverTrips")
  notifications Notification[] @relation("UserNotifications")
  @@map("users")
}

// Model DriverProfile
model DriverProfile {
  id String @id @default(uuid()) @db.Uuid
  userId String @unique @map("user_id") @db.Uuid
  plateNumber String @db.VarChar(20) @map("plate_number")
  vehicleType String @db.VarChar(50) @map("vehicle_type")
  isActive Boolean @default(false) @map("is_active")
  currentLat Decimal? @map("current_lat") @db.Decimal(10, 8)
  currentLng Decimal? @map("current_lng") @db.Decimal(11, 8)
  lastUpdated DateTime @default(now()) @map("last_updated")

  user User @relation("UserDriverProfile", fields: [userId], references: [id], onDelete: Cascade)
}

// Model Booking
model Booking {
  id String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  originLat Decimal @map("origin_lat") @db.Decimal(10, 8)
  originLng Decimal @map("origin_lng") @db.Decimal(11, 8)
  destLat Decimal @map("dest_lat") @db.Decimal(10, 8)
  destLng Decimal @map("dest_lng") @db.Decimal(11, 8)
  status BookingStatus @default(REQUESTED)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user User @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade)
  trip Trip?
}

// Model Trip
model Trip {
  id String @id @default(uuid()) @db.Uuid
  bookingId String @unique @map("booking_id") @db.Uuid
  driverId String @map("driver_id") @db.Uuid
  startTime DateTime? @map("start_time")
  endTime DateTime? @map("end_time")
  status TripStatus @default(ONGOING)

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  driver User @relation("DriverTrips", fields: [driverId], references: [id], onDelete: Cascade)
}

// Model Notification
model Notification {
  id String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  type NotificationType
  payload Json
  status NotificationStatus @default(SENT)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}
