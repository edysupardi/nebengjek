AWSTemplateFormatVersion: '2010-09-09'
Description: 'NebengJek User Service - Using Pre-created IAM Roles'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]

  VpcId:
    Type: String
    Description: VPC ID where services will be deployed

  PrivateSubnet1:
    Type: String
    Description: First private subnet for ECS tasks

  PrivateSubnet2:
    Type: String
    Description: Second private subnet for ECS tasks

  ECSClusterName:
    Type: String
    Description: Name of the ECS cluster

  ECRRepository:
    Type: String
    Default: user-service
    Description: ECR repository name for user service

  # Pre-created IAM Role ARNs
  ExecutionRoleArn:
    Type: String
    Description: ARN of pre-created ECS execution role

  TaskRoleArn:
    Type: String
    Description: ARN of pre-created ECS task role

  # External Database Parameters
  DatabaseEndpoint:
    Type: String
    Description: RDS PostgreSQL endpoint from external infrastructure

  DatabasePort:
    Type: String
    Default: '5432'
    Description: Database port

  DatabaseName:
    Type: String
    Description: Database name

  DatabaseUsername:
    Type: String
    Description: Database username

  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Database password

  RedisHost:
    Type: String
    Description: Redis host from external infrastructure

  RedisPort:
    Type: String
    Default: '6379'
    Description: Redis port

  ImageTag:
    Type: String
    Description: Docker image tag
    Default: latest

  JWTAccessSecret:
    Type: String
    NoEcho: true
    Description: JWT Access Secret

  JWTRefreshSecret:
    Type: String
    NoEcho: true
    Description: JWT Refresh Secret

  GatewaySecretKey:
    Type: String
    NoEcho: true
    Description: Gateway Secret Key

Resources:
  # Security Group for User Service
  UserServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for User Service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 10.0.0.0/16
          Description: HTTP access from VPC
        - IpProtocol: tcp
          FromPort: 8008
          ToPort: 8008
          CidrIp: 10.0.0.0/16
          Description: TCP microservice access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-user-service-sg'

  # CloudWatch Log Group
  UserServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${Environment}/user-service'
      RetentionInDays: 30

  # ECS Task Definition (USING EXISTING IAM ROLES)
  UserServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${Environment}-user-service'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ExecutionRoleArn # ← Using pre-created role
      TaskRoleArn: !Ref TaskRoleArn # ← Using pre-created role
      ContainerDefinitions:
        - Name: user-service
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:${ImageTag}'
          PortMappings:
            - ContainerPort: 3001
              Protocol: tcp
            - ContainerPort: 8008
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: USER_PORT
              Value: '3001'
            - Name: USER_TCP_PORT
              Value: '8008'
            - Name: DATABASE_URL
              Value: !Sub 'postgresql://${DatabaseUsername}:${DatabasePassword}@${DatabaseEndpoint}:${DatabasePort}/${DatabaseName}?sslmode=require'
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: REDIS_PORT
              Value: !Ref RedisPort
            - Name: JWT_ACCESS_SECRET
              Value: !Ref JWTAccessSecret
            - Name: JWT_REFRESH_SECRET
              Value: !Ref JWTRefreshSecret
            - Name: GATEWAY_SECRET_KEY
              Value: !Ref GatewaySecretKey
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref UserServiceLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: user-service
          # HealthCheck:
          #   Command: ['CMD-SHELL', 'curl -f http://localhost:3001/health || exit 1']
          #   Interval: 30
          #   Timeout: 5
          #   Retries: 3
          #   StartPeriod: 60

  # ECS Service
  UserService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${Environment}-user-service'
      Cluster: !Ref ECSClusterName
      TaskDefinition: !Ref UserServiceTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref UserServiceSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
      HealthCheckGracePeriodSeconds: 60
      EnableExecuteCommand: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-user-service'

Outputs:
  UserServiceName:
    Description: Name of the User Service
    Value: !Ref UserService
    Export:
      Name: !Sub '${Environment}-UserService'

  UserServiceSecurityGroup:
    Description: Security Group of User Service
    Value: !Ref UserServiceSecurityGroup
    Export:
      Name: !Sub '${Environment}-UserServiceSecurityGroup'
