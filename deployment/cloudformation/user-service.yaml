AWSTemplateFormatVersion: '2010-09-09'
Description: 'Minimal User Service - No IAM/ECS Creation'

Parameters:
  Environment:
    Type: String
    Default: dev

  VpcId:
    Type: String
    Description: VPC ID
    Default: vpc-021b849d6600dd8b7

  PrivateSubnet1:
    Type: String
    Description: Private subnet 1
    Default: subnet-xxx # You need to get this from VPC stack

  PrivateSubnet2:
    Type: String
    Description: Private subnet 2
    Default: subnet-yyy # You need to get this from VPC stack

Resources:
  # Only create what we CAN create (EC2 and Logs resources)

  UserServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for User Service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 10.0.0.0/16
          Description: User Service HTTP port
        - IpProtocol: tcp
          FromPort: 8008
          ToPort: 8008
          CidrIp: 10.0.0.0/16
          Description: User Service TCP port
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-user-service-sg'

  UserServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${Environment}/user-service'
      RetentionInDays: 7

  # Target Group for Load Balancer (if ALB exists)
  UserServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-user-tg'
      Port: 3001
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-user-service-tg'

Outputs:
  SecurityGroupId:
    Description: Security Group ID for User Service
    Value: !Ref UserServiceSecurityGroup
    Export:
      Name: !Sub '${Environment}-UserServiceSecurityGroup'

  LogGroupName:
    Description: CloudWatch Log Group for User Service
    Value: !Ref UserServiceLogGroup
    Export:
      Name: !Sub '${Environment}-UserServiceLogGroup'

  TargetGroupArn:
    Description: Target Group ARN for User Service
    Value: !Ref UserServiceTargetGroup
    Export:
      Name: !Sub '${Environment}-UserServiceTargetGroup'
