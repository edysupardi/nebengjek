AWSTemplateFormatVersion: '2010-09-09'
Description: 'NebengJek API Gateway Service'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: The deployment environment
    
  VpcId:
    Type: String
    Description: VPC where the resources will be deployed
    
  PrivateSubnet1:
    Type: String
    Description: First private subnet
    
  PrivateSubnet2:
    Type: String
    Description: Second private subnet
    
  PublicSubnet1:
    Type: String
    Description: First public subnet
    
  PublicSubnet2:
    Type: String
    Description: Second public subnet
    
  ECSClusterName:
    Type: String
    Description: Name of the ECS cluster
    
  ECRRepository:
    Type: String
    Description: ECR repository name for API Gateway
    
  SSLCertificateARN:
    Type: String
    Description: ARN of the SSL certificate for HTTPS
    Default: ''
    
  RedisEndpoint:
    Type: String
    Description: Redis endpoint for caching

Resources:
  # Security Group for API Gateway
  ApiGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for API Gateway
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-api-gateway-sg"
  
  # API Gateway load balancer
  ApiGatewayALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ApiGatewaySecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-api-gateway-alb"
  
  # API Gateway target group
  ApiGatewayTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health/liveness
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-api-gateway-tg"
  
  # HTTP Listener
  ApiGatewayALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApiGatewayTargetGroup
      LoadBalancerArn: !Ref ApiGatewayALB
      Port: 80
      Protocol: HTTP
  
  # HTTPS Listener (conditionally created)
  ApiGatewayALBHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasSSLCertificate
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApiGatewayTargetGroup
      LoadBalancerArn: !Ref ApiGatewayALB
      Port: 443
      Protocol: HTTPS
  
  # API Gateway Task Definition
  ApiGatewayTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${Environment}-api-gateway"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ApiGatewayExecutionRole.Arn
      TaskRoleArn: !GetAtt ApiGatewayTaskRole.Arn
      ContainerDefinitions:
        - Name: api-gateway
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest"
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ApiGatewayLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api-gateway
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: REDIS_HOST
              Value: !Select [0, !Split [":", !Ref RedisEndpoint]]
            - Name: REDIS_PORT
              Value: !Select [1, !Split [":", !Ref RedisEndpoint]]
            - Name: USER_SERVICE_HOST
              Value: !ImportValue UserServiceHost
            - Name: USER_SERVICE_PORT
              Value: !ImportValue UserServicePort
            - Name: BOOKING_SERVICE_HOST
              Value: !ImportValue BookingServiceHost
            - Name: BOOKING_SERVICE_PORT
              Value: !ImportValue BookingServicePort
            - Name: MATCHING_SERVICE_HOST
              Value: !ImportValue MatchingServiceHost
            - Name: MATCHING_SERVICE_PORT
              Value: !ImportValue MatchingServicePort
            - Name: PAYMENT_SERVICE_HOST
              Value: !ImportValue PaymentServiceHost
            - Name: PAYMENT_SERVICE_PORT
              Value: !ImportValue PaymentServicePort
            - Name: NOTIFICATION_SERVICE_HOST
              Value: !ImportValue NotificationServiceHost
            - Name: NOTIFICATION_SERVICE_PORT
              Value: !ImportValue NotificationServicePort
            - Name: TRACKING_SERVICE_HOST
              Value: !ImportValue TrackingServiceHost
            - Name: TRACKING_SERVICE_PORT
              Value: !ImportValue TrackingServicePort
          HealthCheck:
            Command: ["CMD-SHELL", "curl -f http://localhost:3000/health/liveness || exit 1"]
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
  
  # API Gateway Service
  ApiGatewayService:
    Type: AWS::ECS::Service
    DependsOn: ApiGatewayALBListener
    Properties:
      ServiceName: !Sub "${Environment}-api-gateway"
      Cluster: !Ref ECSClusterName
      TaskDefinition: !Ref ApiGatewayTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ApiGatewaySecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: api-gateway
          ContainerPort: 3000
          TargetGroupArn: !Ref ApiGatewayTargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-api-gateway-service"
  
  # Auto Scaling
  ApiGatewayScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Join 
        - /
        - - service
          - !Ref ECSClusterName
          - !GetAtt ApiGatewayService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt ApiGatewayAutoScalingRole.Arn
  
  ApiGatewayScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${Environment}-api-gateway-scaling-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ApiGatewayScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
  
  # CloudWatch Logs Group
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${Environment}/api-gateway"
      RetentionInDays: 30
  
  # IAM Roles
  ApiGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  
  ApiGatewayTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonXRayDaemonWriteAccess
  
  ApiGatewayAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

Conditions:
  HasSSLCertificate: !Not [!Equals [!Ref SSLCertificateARN, '']]

Outputs:
  ApiEndpoint:
    Description: URL of the API Gateway
    Value: !If 
      - HasSSLCertificate
      - !Sub "https://${ApiGatewayALB.DNSName}"
      - !Sub "http://${ApiGatewayALB.DNSName}"
    Export:
      Name: !Sub "${Environment}-ApiGatewayEndpoint"
  
  ApiGatewaySecurityGroupId:
    Description: Security Group ID for API Gateway
    Value: !Ref ApiGatewaySecurityGroup
    Export:
      Name: !Sub "${Environment}-ApiGatewaySecurityGroupId"